{"ast":null,"code":"var _jsxFileName = \"/Users/Aditya/Desktop/ASL/RealTimeSignLanguageDetectionwithTFJS/ReactComputerVisionTemplate/src/App.js\";\n// Import dependencies\nimport React, { useRef, useEffect, useCallback } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\"; //import { nextFrame } from \"@tensorflow/tfjs\";\n// 2. TODO - Import drawing utility here\n// e.g. import { drawRect } from \"./utilities\";\n\nimport { drawRect } from \"./utilities\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null); // Main function\n\n  const runCoco = useCallback(async () => {\n    // 3. TODO - Load network \n    // e.g. const net = await cocossd.load();\n    // https://cloud-object-storage-cos-standard-vnm.s3.us-east.cloud-object-storage.appdomain.cloud/model.json\n    console.log(\"runCoco is called\");\n\n    try {\n      // Load network \n      const net = await tf.loadGraphModel('https://cloud-object-storage-cos-standard-vnm.s3.us-east.cloud-object-storage.appdomain.cloud/model.json');\n      console.log(\"Model loaded\"); // Loop and detect hands\n\n      setInterval(() => {\n        detect(net);\n      }, 16.7);\n    } catch (error) {\n      console.error(\"Error loading model: \", error);\n    }\n  }, []);\n\n  const detect = async net => {\n    console.log(\"detect is called\"); // Check data is available\n\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Set canvas height and width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // 4. TODO - Make Detections\n\n      const img = tf.browser.fromPixels(video);\n      const resized = tf.image.resizeBilinear(img, [640, 480]);\n      const casted = resized.cast('int32');\n      const expanded = casted.expandDims(0);\n      const obj = await net.executeAsync(expanded);\n      console.log(obj);\n      const boxes = await obj[1].array();\n      const classes = await obj[2].array();\n      const scores = await obj[4].array(); // Draw mesh\n\n      const ctx = canvasRef.current.getContext(\"2d\"); // 5. TODO - Update drawing utility\n      // drawSomething(obj, ctx)  \n\n      requestAnimationFrame(() => {\n        drawRect(boxes[0], classes[0], scores[0], 0.8, videoWidth, videoHeight, ctx);\n      });\n      tf.dispose(img);\n      tf.dispose(resized);\n      tf.dispose(casted);\n      tf.dispose(expanded);\n      tf.dispose(obj);\n    }\n  };\n\n  useEffect(() => {\n    runCoco();\n  }, [runCoco]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Real Time Sign Lanuage Detection\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"instructBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"instruct\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"For best results, use a very well lit room with a blank background\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"instruct\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"Position only your hand in the frame, 1-2 feet from the camera\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"instruct\",\n    style: {\n      fontSize: \"15px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \" Test with:\"), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"imgs\",\n    src: \"/src/images/hello.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Webcam, {\n    className: \"frame\",\n    ref: webcamRef,\n    muted: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    className: \"frame\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Aditya/Desktop/ASL/RealTimeSignLanguageDetectionwithTFJS/ReactComputerVisionTemplate/src/App.js"],"names":["React","useRef","useEffect","useCallback","tf","Webcam","drawRect","App","webcamRef","canvasRef","runCoco","console","log","net","loadGraphModel","setInterval","detect","error","current","video","readyState","videoWidth","videoHeight","width","height","img","browser","fromPixels","resized","image","resizeBilinear","casted","cast","expanded","expandDims","obj","executeAsync","boxes","array","classes","scores","ctx","getContext","requestAnimationFrame","dispose","fontSize"],"mappings":"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","sourcesContent":["// Import dependencies\nimport React, { useRef, useEffect, useCallback } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\n//import { nextFrame } from \"@tensorflow/tfjs\";\n// 2. TODO - Import drawing utility here\n// e.g. import { drawRect } from \"./utilities\";\nimport {drawRect} from \"./utilities\"; \n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Main function\n  const runCoco = useCallback(async () => {\n    // 3. TODO - Load network \n    // e.g. const net = await cocossd.load();\n    // https://cloud-object-storage-cos-standard-vnm.s3.us-east.cloud-object-storage.appdomain.cloud/model.json\n\n    console.log(\"runCoco is called\");\n\n    try {\n      // Load network \n      const net = await tf.loadGraphModel('https://cloud-object-storage-cos-standard-vnm.s3.us-east.cloud-object-storage.appdomain.cloud/model.json');\n      console.log(\"Model loaded\");\n\n      // Loop and detect hands\n      setInterval(() => {\n        detect(net);\n      }, 16.7);\n    } catch (error) {\n      console.error(\"Error loading model: \", error);\n    }\n  }, []);\n\n\n\n  const detect = async (net) => {\n    console.log(\"detect is called\");  \n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // 4. TODO - Make Detections\n      const img = tf.browser.fromPixels(video)\n      const resized = tf.image.resizeBilinear(img, [640,480])\n      const casted = resized.cast('int32')\n      const expanded = casted.expandDims(0)\n      const obj = await net.executeAsync(expanded)\n      console.log(obj)\n\n      const boxes = await obj[1].array()\n      const classes = await obj[2].array()\n      const scores = await obj[4].array()\n      \n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n\n      // 5. TODO - Update drawing utility\n      // drawSomething(obj, ctx)  \n      requestAnimationFrame(()=>{drawRect(boxes[0], classes[0], scores[0], 0.8, videoWidth, videoHeight, ctx)}); \n      tf.dispose(img)\n      tf.dispose(resized)\n      tf.dispose(casted)\n      tf.dispose(expanded)\n      tf.dispose(obj)\n\n    }\n  };\n\n  useEffect(()=>{runCoco()},[runCoco]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div className=\"header\">\n        <h1 className=\"title\">Real Time Sign Lanuage Detection</h1>\n      </div>\n      <div className=\"instructBox\">\n        <p className=\"instruct\">For best results, use a very well lit room with a blank background</p>\n        <p className=\"instruct\">Position only your hand in the frame, 1-2 feet from the camera</p>\n        <p className=\"instruct\" style= {{fontSize: \"15px\"}}> Test with:</p>\n        <img className=\"imgs\" src=\"/src/images/hello.png\" />\n      </div>\n        <Webcam\n        className= \"frame\"\n          ref={webcamRef}\n          muted={true} \n        />\n\n        <canvas\n          ref={canvasRef}\n          className= \"frame\"\n      \n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}