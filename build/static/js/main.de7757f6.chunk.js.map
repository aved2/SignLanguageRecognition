{"version":3,"sources":["utilities.js","App.js","index.js"],"names":["labelMap","1","name","color","2","3","4","5","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","i","length","y","x","height","width","text","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","Math","round","rect","stroke","App","webcamRef","useRef","canvasRef","runCoco","useCallback","a","console","log","process","tf","net","setInterval","detect","error","current","video","readyState","videoWidth","videoHeight","img","fromPixels","resized","resizeBilinear","casted","cast","expanded","expandDims","executeAsync","obj","array","getContext","requestAnimationFrame","useEffect","className","src","alt","ref","muted","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de7757f6.chunk.js","sourcesContent":["// Define our labelmap\nconst labelMap = {\n    1:{name:'Hello', color:'red'},\n    2:{name:'Thank You', color:'yellow'},\n    3:{name:'I Love You', color:'lime'},\n    4:{name:'Yes', color:'blue'},\n    5:{name:'No', color:'purple'},\n}\n\n// Define a drawing function\nexport const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx)=>{\n    for(let i=0; i<=boxes.length; i++){\n        if(boxes[i] && classes[i] && scores[i]>threshold){\n            // Extract variables\n            const [y,x,height,width] = boxes[i]\n            const text = classes[i]\n            \n            // Set styling\n            ctx.strokeStyle = labelMap[text]['color']\n            ctx.lineWidth = 10\n            ctx.fillStyle = 'white'\n            ctx.font = '30px Arial'         \n            \n            // DRAW!!\n            ctx.beginPath()\n            ctx.fillText(labelMap[text]['name'] + ' - ' + Math.round(scores[i]*100)/100, x*imgWidth, y*imgHeight-10)\n            ctx.rect(x*imgWidth, y*imgHeight, width*imgWidth/2, height*imgHeight/1.5);\n            ctx.stroke()\n        }\n    }\n}","// Import dependencies\nimport React, { useRef, useEffect, useCallback } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\n//import { nextFrame } from \"@tensorflow/tfjs\";\n// 2. TODO - Import drawing utility here\n// e.g. import { drawRect } from \"./utilities\";\nimport {drawRect} from \"./utilities\"; \n\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Main function\n  const runCoco = useCallback(async () => {\n    // 3. TODO - Load network \n    // e.g. const net = await cocossd.load();\n    // https://cloud-object-storage-cos-standard-vnm.s3.us-east.cloud-object-storage.appdomain.cloud/model.json\n\n    console.log(\"runCoco is called\");\n\n    try {\n      // Load model\n      console.log(\"Model URL:\", process.env.REACT_APP_MODEL_URL);\n      const net = await tf.loadGraphModel(process.env.REACT_APP_MODEL_URL);\n      console.log(\"Model loaded\");\n\n      // Loop and detect hands\n      setInterval(() => {\n        detect(net);\n      }, 16.7);\n    } catch (error) {\n      console.error(\"Error loading model: \", error);\n    }\n  }, []);\n\n\n\n  const detect = async (net) => {\n    console.log(\"detect is called\");  \n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // 4. TODO - Make Detections\n      const img = tf.browser.fromPixels(video)\n      const resized = tf.image.resizeBilinear(img, [640,480])\n      const casted = resized.cast('int32')\n      const expanded = casted.expandDims(0)\n      const obj = await net.executeAsync(expanded)\n      console.log(obj)\n\n      const boxes = await obj[1].array()\n      const classes = await obj[2].array()\n      const scores = await obj[4].array()\n      \n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n\n      // 5. TODO - Update drawing utility\n      // drawSomething(obj, ctx)  \n      requestAnimationFrame(()=>{drawRect(boxes[0], classes[0], scores[0], 0.8, videoWidth, videoHeight, ctx)}); \n      tf.dispose(img)\n      tf.dispose(resized)\n      tf.dispose(casted)\n      tf.dispose(expanded)\n      tf.dispose(obj)\n\n    }\n  };\n\n  useEffect(()=>{runCoco()},[runCoco]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div className=\"header\">\n        <h1 className=\"title\">Real Time Sign Lanuage Detection</h1>\n      </div>\n      <div className=\"instructBox\">\n        <p className=\"instruct\">For best results, use a very well lit room with a blank background</p>\n        <p className=\"instruct\">Position only your hand in the frame, 1-2 feet from the camera</p>\n        <p className=\"instruct\">Allow browser camera permissions, test model with:</p>\n        \n        <div className=\"imgs\">\n        <div className=\"hands\">\n          <p className=\"gests\">Hello</p>\n          <img className=\"img\" src=\"/images/hello.png\" alt=\"Hello in ASL\" />\n        </div>\n        <div className=\"hands\">\n        <p className=\"gests\">Yes</p>\n        <img className=\"img\" src=\"/images/yes.png\" alt=\"Hello in ASL\" />\n        </div>\n        <div className=\"hands\">\n        <p className=\"gests\">No</p>\n        <img className=\"img\" src=\"/images/no.png\" alt=\"Hello in ASL\" />\n        </div>\n        <div className=\"hands\">\n        <p className=\"gests\">I Love You</p>\n        <img className=\"img\" src=\"/images/ily.png\" alt=\"Hello in ASL\" />\n        </div>\n        <div className=\"hands\">\n        <p className=\"gests\">Thank You</p>\n        <img className=\"img\" src=\"/images/ty.png\" alt=\"Hello in ASL\" />\n        </div>\n        </div>\n        <p className=\" footer \">*Model is in initial training stage. Currently is only trained on the given five poses, working on expanding training to improve accuracy.</p>\n        </div>\n        <Webcam\n        className= \"frame\"\n          ref={webcamRef}\n          muted={true} \n        />\n\n        <canvas\n          ref={canvasRef}\n          className= \"frame\"\n      \n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}